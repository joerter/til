* December 2020
** Sunday, December 19
*** Emacs
**** How to use general.el to make leader key bindings like I have in vim!
#+BEGIN_SRC emacs-lisp
(jo/leader-keys
  :keymaps 'normal
  ;; windows
  "w%" '(evil-window-vsplit :which-key "split window vertically")
  "w\"" '(evil-window-split :which-key "split window horizontally")
  "wd" '(evil-window-delete :which-key "close window")
  "wj" '(evil-window-down :which-key "window down")
  "wh" '(evil-window-left :which-key "window left")
  "wk" '(evil-window-up :which-key "window up")
  "wl" '(evil-window-right :which-key "window right")
  ;; files
  "fs" '(evil-write :which-key "write file")
  "ff" '(counsel-find-file :which-key "dired")
  ;; buffers
  "be" '(eval-buffer :which-key "eval-buffer")
  "bb" '(counsel-switch-buffer :which-key "switch buffer")
  "bd" '(kill-buffer :which-key "kill-buffer")
  )
  #+END_SRC
**** My emacs config is starting to become useful now
**** DONE Still need to learn some better buffer management commands around deleting buffers
***** Haha I just learned that c-d on counsel-buffer will delete the buffer. Perfect!
**** DONE Learn about eshell
**** I learned a few things about projectile by reading the readme.
** Thursday, December 23
*** Using `@stacks/conect` to authenticate a web3 app on stacks blockchain
- I was using this repo as an example: https://github.com/hirosystems/todos
- Ended up with this code to authenticate a user in my park-miami app:
#+BEGIN_SRC javascript
import { AppConfig, showConnect, UserSession } from '@stacks/connect';
import { Person } from '@stacks/profile';
import miamicoin from '../miamicoin.svg';

const appConfig = new AppConfig(['store_write', 'publish_data']);
export const userSession = new UserSession({ appConfig });

export function authenticate() {
  showConnect({
    appDetails: {
      name: 'Park Miami',
      icon: `${miamicoin}`,
    },
    redirectTo: '/',
    onFinish: () => {
      window.location.reload();
    },
    userSession: userSession,
  });
}

export function getUserData() {
  return userSession.loadUserData();
}

export function getPerson() {
  return new Person(getUserData().profile);
}
#+END_SRC
- However, when I used that code in my app, I got an error about webpack 5 not including node.js polyfills:
  #+BEGIN_SRC bash
    BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default
#+END_SRC
    - Apparently, webpack used to automatically alias some native nodejs modules. This is explained here: https://webpack.js.org/configuration/resolve/#resolvefallback
    - So I had to `eject` from `create-react-app` and add the following to the fallback in webpack.config.js:
    #+BEGIN_SRC javascript
      {
        // ...
        fallback: {
          stream: require.resolve('stream-browserify'),
          crypto: require.resolve('crypto-browserify'),
          buffer: require.resolve('buffer'),
        },
        // ...
      }
#+END_SRC
- But then, I started getting errors about `Buffer` not being defined. After googling around, I found a few links:
- https://stackoverflow.com/questions/68707553/uncaught-referenceerror-buffer-is-not-defined
- https://github.com/webpack/changelog-v5/issues/10
- So I added this to the `plugins` section:
#+BEGIN_SRC javascript
  {
  // ...
    plugins: [
      new webpack.ProvidePlugin({
        Buffer: ['buffer', 'Buffer'],
      }),
    ],
//... 
  }
#+END_SRC
- After that, things seem to be working again!
